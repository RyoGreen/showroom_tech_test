// Code generated by MockGen. DO NOT EDIT.
// Source: youtube_api_service.go
//
// Generated by this command:
//
//	mockgen -source=youtube_api_service.go -destination=mock_youtube_api_service.go -package=youtube
//

// Package youtube is a generated GoMock package.
package youtube

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	youtube "google.golang.org/api/youtube/v3"
)

// MockYoutubeApiService is a mock of YoutubeApiService interface.
type MockYoutubeApiService struct {
	ctrl     *gomock.Controller
	recorder *MockYoutubeApiServiceMockRecorder
	isgomock struct{}
}

// MockYoutubeApiServiceMockRecorder is the mock recorder for MockYoutubeApiService.
type MockYoutubeApiServiceMockRecorder struct {
	mock *MockYoutubeApiService
}

// NewMockYoutubeApiService creates a new mock instance.
func NewMockYoutubeApiService(ctrl *gomock.Controller) *MockYoutubeApiService {
	mock := &MockYoutubeApiService{ctrl: ctrl}
	mock.recorder = &MockYoutubeApiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYoutubeApiService) EXPECT() *MockYoutubeApiServiceMockRecorder {
	return m.recorder
}

// FetchChannelInfo mocks base method.
func (m *MockYoutubeApiService) FetchChannelInfo(parts []string, channelID string) (*youtube.ChannelListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchChannelInfo", parts, channelID)
	ret0, _ := ret[0].(*youtube.ChannelListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchChannelInfo indicates an expected call of FetchChannelInfo.
func (mr *MockYoutubeApiServiceMockRecorder) FetchChannelInfo(parts, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchChannelInfo", reflect.TypeOf((*MockYoutubeApiService)(nil).FetchChannelInfo), parts, channelID)
}

// FetchVideos mocks base method.
func (m *MockYoutubeApiService) FetchVideos(parts []string, query, order, dataType, publishedAfter, nextPageToken string, maxResults int64) (*youtube.SearchListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchVideos", parts, query, order, dataType, publishedAfter, nextPageToken, maxResults)
	ret0, _ := ret[0].(*youtube.SearchListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchVideos indicates an expected call of FetchVideos.
func (mr *MockYoutubeApiServiceMockRecorder) FetchVideos(parts, query, order, dataType, publishedAfter, nextPageToken, maxResults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchVideos", reflect.TypeOf((*MockYoutubeApiService)(nil).FetchVideos), parts, query, order, dataType, publishedAfter, nextPageToken, maxResults)
}
